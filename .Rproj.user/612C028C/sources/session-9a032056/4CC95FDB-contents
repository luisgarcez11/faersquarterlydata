drug_info %>%
full_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))
if(is.null(drug_indication_pattern) & is.null(drug_pattern)){
drug_indi_info <- drug_info %>%
full_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))  }
drug_indi_info
drug_info
drug_info <- drug_info %>% filter(primaryid  %in% drug_indi_info$primaryid)
indi_info <- indi_info %>% filter(primaryid  %in% drug_indi_info$primaryid)
#cache objects to be filled
cache <- list()
cache_files <- c()
#files to be filled
demo_info <- tibble::tibble()
outc_info <- tibble::tibble()
reac_info <- tibble::tibble()
rpsr_info <- tibble::tibble()
ther_info <- tibble::tibble()
for ( ascii_file in ascii_files){
message(paste("binding",ascii_file, which(ascii_file == ascii_files), "out of", length(ascii_files)))
if(stringr::str_detect(ascii_file, "demo|DEMO")){
demo_info <- demo_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.))) %>%
{if("nda_num" %in% names(.)){.$nda_num <- as.integer(.$nda_num); .}else{.}} %>%
mutate_at(c("age", "wt"), ~as.integer(.))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "outc|OUTC") ){
outc_info <- outc_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
{if("outc_cod" %in% names(.)){dplyr::rename(., "outc_code" = "outc_cod")}else{.}} %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "reac|REAC") ){
reac_info <- reac_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "rpsr|RPSR") ){
rpsr_info <- rpsr_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "ther|THER") ){
ther_info <- ther_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
{if("dur" %in% names(.)){.$dur <- as.double(.$dur); .}else{.}} %>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(!is.null(cache_path)){
message(paste("saving", ascii_file, "into cache:", cache_path))
cache_files <- c(cache_files, ascii_file)
ascii_list <- list(demographics = demo_info,
drug = drug_info,
indication = indi_info,
outcome = outc_info,
reaction = reac_info,
report_source = rpsr_info,
therapy = ther_info)
cache$files <- cache_files
save(cache, file = cache_path)
}
}
#' Read FAERS ascii files
#'
#' @param ascii_dir directory path where ascii files are
#' @param cache_path (optional) a string. Must have a ".Rdata" extension to save the read tabular formats in each loop.
#'
#' @return A list with binded tibbles retrieved from files.
#' @export
retrieve_faers_ascii <- function(ascii_dir, cache_path = "NULL", drug_indication_pattern = NULL, drug_pattern = NULL,
primary_suspect = TRUE){
if(!dir.exists(ascii_dir)){stop("directory does not exist")}
ascii_files <- list.files(ascii_dir, full.names = TRUE, pattern = ".txt")
ascii_drug_files <- ascii_files[which(stringr::str_detect(ascii_files, pattern = "drug|DRUG|indi|INDI"))]
#gather drug files
drug_info <- tibble::tibble()
indi_info <- tibble::tibble()
drug_indi_info <- tibble::tibble()
#iterating over drug and indication files to filter the chosen ADRs
for ( ascii_drug_file in ascii_drug_files){
message(paste("Retrieving drug/indication information: binding",ascii_drug_file,
which(ascii_drug_file == ascii_drug_files), "out of", length(ascii_drug_files)))
if(stringr::str_detect(ascii_drug_file, "drug|DRUG") ){
read_file <- data.table::fread(ascii_drug_file, sep = "$", quote = "", fill = FALSE) %>%
{if("nda_num" %in% names(.)){.$nda_num <- as.double(.$nda_num); .}else{.}} %>%
{if("dose_amt" %in% names(.)){.$dose_amt <- as.double(.$dose_amt); .}else{.}} %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))
drug_info <- bind_rows(drug_info, read_file %>%
{if(primary_suspect){filter(., role_cod == "PS" )}else{.}} %>%
{if(!is.null(drug_pattern)){ filter(., stringr::str_detect(string = drugname, pattern = drug_pattern))}else{.}})
}
if(stringr::str_detect(ascii_drug_file, "indi|INDI") ){
read_file <- data.table::fread(ascii_drug_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))
indi_info <- bind_rows(indi_info, read_file %>%
{if(!is.null(drug_indication_pattern)){ filter(., stringr::str_detect(string = indi_pt, pattern = drug_indication_pattern))}else{.}} )
}}
if(!is.null(drug_indication_pattern) & !is.null(drug_pattern)){
drug_indi_info <- drug_info %>%
inner_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq")) }
if(!is.null(drug_indication_pattern) & is.null(drug_pattern)){
if(primary_suspect == TRUE){
drug_indi_info <- drug_info %>%
inner_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))}
else{ drug_indi_info <- indi_info   }
}
if(is.null(drug_indication_pattern) & !is.null(drug_pattern)){
drug_indi_info <- drug_info }
if(is.null(drug_indication_pattern) & is.null(drug_pattern)){
drug_indi_info <- drug_info %>%
full_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))  }
drug_info <- drug_info %>% filter(primaryid  %in% drug_indi_info$primaryid)
indi_info <- indi_info %>% filter(primaryid  %in% drug_indi_info$primaryid)
#cache objects to be filled
cache <- list()
cache_files <- c()
#files to be filled
demo_info <- tibble::tibble()
outc_info <- tibble::tibble()
reac_info <- tibble::tibble()
rpsr_info <- tibble::tibble()
ther_info <- tibble::tibble()
for ( ascii_file in ascii_files){
message(paste("binding",ascii_file, which(ascii_file == ascii_files), "out of", length(ascii_files)))
if(stringr::str_detect(ascii_file, "demo|DEMO")){
demo_info <- demo_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.))) %>%
{if("nda_num" %in% names(.)){.$nda_num <- as.integer(.$nda_num); .}else{.}} %>%
mutate_at(c("age", "wt"), ~as.integer(.))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "outc|OUTC") ){
outc_info <- outc_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
{if("outc_cod" %in% names(.)){dplyr::rename(., "outc_code" = "outc_cod")}else{.}} %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "reac|REAC") ){
reac_info <- reac_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "rpsr|RPSR") ){
rpsr_info <- rpsr_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "ther|THER") ){
ther_info <- ther_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
{if("dur" %in% names(.)){.$dur <- as.double(.$dur); .}else{.}} %>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(!is.null(cache_path)){
message(paste("saving", ascii_file, "into cache:", cache_path))
cache_files <- c(cache_files, ascii_file)
ascii_list <- list(demographics = demo_info,
drug = drug_info,
indication = indi_info,
outcome = outc_info,
reaction = reac_info,
report_source = rpsr_info,
therapy = ther_info)
cache$files <- cache_files
save(cache, file = cache_path)
}
}
return( list(demographics = demo_info,
drug = drug_info,
indication = indi_info,
outcome = outc_info,
reaction = reac_info,
report_source = rpsr_info,
therapy = ther_info))
}
testthat::expect_true( object = is.list(retrieve_faers_ascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/resources/cache/cache_test.rdata")) )
testthat::expect_true( object = is.list(retrieve_faers_ascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/resources/cache/cache_test.rdata", drug_indication_pattern = "Parkinson")) )
testthat::expect_true( object = is.list(retrieve_faers_ascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/resources/cache/cache_test.rdata", drug_pattern = "Levodopa")) )
testthat::expect_true( object = is.list(retrieve_faers_ascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/resources/cache/cache_test.rdata",
drug_indication_pattern = "Parkinson",
drug_pattern = "Levodopa")) )
if(!dir.exists(ascii_dir)){stop("directory does not exist")}
ascii_files <- list.files(ascii_dir, full.names = TRUE, pattern = ".txt")
ascii_drug_files <- ascii_files[which(stringr::str_detect(ascii_files, pattern = "drug|DRUG|indi|INDI"))]
#gather drug files
drug_info <- tibble::tibble()
indi_info <- tibble::tibble()
drug_indi_info <- tibble::tibble()
#iterating over drug and indication files to filter the chosen ADRs
for ( ascii_drug_file in ascii_drug_files){
message(paste("Retrieving drug/indication information: binding",ascii_drug_file,
which(ascii_drug_file == ascii_drug_files), "out of", length(ascii_drug_files)))
if(stringr::str_detect(ascii_drug_file, "drug|DRUG") ){
read_file <- data.table::fread(ascii_drug_file, sep = "$", quote = "", fill = FALSE) %>%
{if("nda_num" %in% names(.)){.$nda_num <- as.double(.$nda_num); .}else{.}} %>%
{if("dose_amt" %in% names(.)){.$dose_amt <- as.double(.$dose_amt); .}else{.}} %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))
drug_info <- bind_rows(drug_info, read_file %>%
{if(primary_suspect){filter(., role_cod == "PS" )}else{.}} %>%
{if(!is.null(drug_pattern)){ filter(., stringr::str_detect(string = drugname, pattern = drug_pattern))}else{.}})
}
if(stringr::str_detect(ascii_drug_file, "indi|INDI") ){
read_file <- data.table::fread(ascii_drug_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))
indi_info <- bind_rows(indi_info, read_file %>%
{if(!is.null(drug_indication_pattern)){ filter(., stringr::str_detect(string = indi_pt, pattern = drug_indication_pattern))}else{.}} )
}}
if(!is.null(drug_indication_pattern) & !is.null(drug_pattern)){
drug_indi_info <- drug_info %>%
inner_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq")) }
if(!is.null(drug_indication_pattern) & is.null(drug_pattern)){
if(primary_suspect == TRUE){
drug_indi_info <- drug_info %>%
inner_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))}
else{ drug_indi_info <- indi_info   }
}
if(is.null(drug_indication_pattern) & !is.null(drug_pattern)){
drug_indi_info <- drug_info }
if(is.null(drug_indication_pattern) & is.null(drug_pattern)){
drug_indi_info <- drug_info %>%
full_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))  }
if(is.null(drug_indication_pattern) & is.null(drug_pattern)){
drug_indi_info <- drug_info %>%
full_join(indi_info %>% group_by(primaryid, caseid ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))  }
drug_info %>%
full_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))
indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup()
indi_info %>% group_by(primaryid, caseid ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup()
indi_info %>% group_by(primaryid ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup()
#' Read FAERS ascii files
#'
#' @param ascii_dir directory path where ascii files are
#' @param cache_path (optional) a string. Must have a ".Rdata" extension to save the read tabular formats in each loop.
#'
#' @return A list with binded tibbles retrieved from files.
#' @export
retrieve_faers_ascii <- function(ascii_dir, cache_path = "NULL", drug_indication_pattern = NULL, drug_pattern = NULL,
primary_suspect = TRUE){
if(!dir.exists(ascii_dir)){stop("directory does not exist")}
ascii_files <- list.files(ascii_dir, full.names = TRUE, pattern = ".txt")
ascii_drug_files <- ascii_files[which(stringr::str_detect(ascii_files, pattern = "drug|DRUG|indi|INDI"))]
#gather drug files
drug_info <- tibble::tibble()
indi_info <- tibble::tibble()
drug_indi_info <- tibble::tibble()
#iterating over drug and indication files to filter the chosen ADRs
for ( ascii_drug_file in ascii_drug_files){
message(paste("Retrieving drug/indication information: binding",ascii_drug_file,
which(ascii_drug_file == ascii_drug_files), "out of", length(ascii_drug_files)))
if(stringr::str_detect(ascii_drug_file, "drug|DRUG") ){
read_file <- data.table::fread(ascii_drug_file, sep = "$", quote = "", fill = FALSE) %>%
{if("nda_num" %in% names(.)){.$nda_num <- as.double(.$nda_num); .}else{.}} %>%
{if("dose_amt" %in% names(.)){.$dose_amt <- as.double(.$dose_amt); .}else{.}} %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))
drug_info <- bind_rows(drug_info, read_file %>%
{if(primary_suspect){filter(., role_cod == "PS" )}else{.}} %>%
{if(!is.null(drug_pattern)){ filter(., stringr::str_detect(string = drugname, pattern = drug_pattern))}else{.}})
}
if(stringr::str_detect(ascii_drug_file, "indi|INDI") ){
read_file <- data.table::fread(ascii_drug_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))
indi_info <- bind_rows(indi_info, read_file %>%
{if(!is.null(drug_indication_pattern)){ filter(., stringr::str_detect(string = indi_pt, pattern = drug_indication_pattern))}else{.}} )
}}
if(!is.null(drug_indication_pattern) & !is.null(drug_pattern)){
drug_indi_info <- drug_info %>%
inner_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq")) }
if(!is.null(drug_indication_pattern) & is.null(drug_pattern)){
if(primary_suspect == TRUE){
drug_indi_info <- drug_info %>%
inner_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))}
else{ drug_indi_info <- indi_info   }
}
if(is.null(drug_indication_pattern) & !is.null(drug_pattern)){
drug_indi_info <- drug_info }
if(is.null(drug_indication_pattern) & is.null(drug_pattern)){
drug_indi_info <- drug_info %>%
full_join(indi_info %>% group_by(primaryid, caseid, indi_drug_seq ) %>%
summarise(indi_pt = paste(sort(unique(indi_pt)), collapse = "/" )) %>%
ungroup(), by = c("primaryid", "caseid", "drug_seq"= "indi_drug_seq"))  }
drug_info <- drug_info %>% filter(primaryid  %in% drug_indi_info$primaryid)
indi_info <- indi_info %>% filter(primaryid  %in% drug_indi_info$primaryid)
#cache objects to be filled
cache <- list()
cache_files <- c()
#files to be filled
demo_info <- tibble::tibble()
outc_info <- tibble::tibble()
reac_info <- tibble::tibble()
rpsr_info <- tibble::tibble()
ther_info <- tibble::tibble()
for ( ascii_file in ascii_files){
message(paste("binding",ascii_file, which(ascii_file == ascii_files), "out of", length(ascii_files)))
if(stringr::str_detect(ascii_file, "demo|DEMO")){
demo_info <- demo_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.))) %>%
{if("nda_num" %in% names(.)){.$nda_num <- as.integer(.$nda_num); .}else{.}} %>%
mutate_at(c("age", "wt"), ~as.integer(.))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "outc|OUTC") ){
outc_info <- outc_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
{if("outc_cod" %in% names(.)){dplyr::rename(., "outc_code" = "outc_cod")}else{.}} %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "reac|REAC") ){
reac_info <- reac_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "rpsr|RPSR") ){
rpsr_info <- rpsr_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(stringr::str_detect(ascii_file, "ther|THER") ){
ther_info <- ther_info %>% bind_rows(data.table::fread(ascii_file, sep = "$", quote = "", fill = FALSE) %>%
mutate_at(vars(ends_with("_dt")), list(~arrange_date(.)))%>%
{if("dur" %in% names(.)){.$dur <- as.double(.$dur); .}else{.}} %>%
filter(primaryid %in% drug_indi_info$primaryid))}
if(!is.null(cache_path)){
message(paste("saving", ascii_file, "into cache:", cache_path))
cache_files <- c(cache_files, ascii_file)
ascii_list <- list(demographics = demo_info,
drug = drug_info,
indication = indi_info,
outcome = outc_info,
reaction = reac_info,
report_source = rpsr_info,
therapy = ther_info)
cache$files <- cache_files
save(cache, file = cache_path)
}
}
return( list(demographics = demo_info,
drug = drug_info,
indication = indi_info,
outcome = outc_info,
reaction = reac_info,
report_source = rpsr_info,
therapy = ther_info))
}
faers_ascii_data
faers_ascii_data <- retrieve_faers_ascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII")
faers_ascii_data
faers_ascii_data_unified <- unify_tabular_ascii(ascii_list = faers_ascii_data)
testthat::expect_error(object = retrive_from_xml_files(xml_address_vector = c("file", "other_file")))
testthat::expect_true( object = is.data.frame(retrive_from_xml_files(xml_address = "tests/resources/1_ADR22Q1_example.xml" )))
testthat::expect_true( object = is.data.frame(retrive_from_xml_files(xml_address = "tests/resources/1_ADR22Q1_example.xml" , cache_path = "tests/resources/cache/cache_xml.Rdata")))
retrieve_faers_ascii
faers_ascii_data <- retrieve_faers_ascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII")
faers_ascii_data_unified <- unify_tabular_ascii(ascii_list = faers_ascii_data)
usethis::use_data(faers_ascii_data_unified)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
qnorm
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_pipe()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
cars
cars %>% arranges("speed")
cars %>% arrange("speed")
testthat::expect_error(object = retrieve_unique_info(xml_address_vector = c("file", "other_file")))
retrieve_unique_info(xml_address_vector = "tests/resources/1_ADR22Q1_example.xml" )
testthat::expect_true( object = is.list(retrieve_unique_info(xml_address_vector = "tests/resources/1_ADR22Q1_example.xml" )))
devtools::check()
tabular_faersdata_example
devtools::check()
estimate_ror_bygroup(tabular_faers_data = tabular_faersdata_example %>%
filter(sex %in% c("F", "M")) ,
group_of_interest_col = "sex",
group_of_interest_ref = "M",
event_of_interest_col = "pt")
estimate_ror_bygroup(tabular_faers_data = tabular_faersdata_example %>%
filter(sex %in% c("F", "M")) ,
group_of_interest_col = "sex",
group_of_interest_ref = "M",
event_of_interest_col = "pt")
devtools::check()
usethis::use_import_from(package = "stats")
usethis::use_import_from("stats", fun = .)
usethis::use_import_from("stats", fun = "qnorm")
tabular_faersdata_example
devtools::check()
tabular_faersdata_example
tabular_faersdata_example$sex
devtools::check()
faers_ascii_data <- retrieve_faersascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
drug_indication_pattern = "Parkinson")
faers_ascii_data_unified <- unify_tabular_ascii(ascii_list = faers_ascii_data)
testthat::expect_true(is.list(summary_faersdata(faers_ascii_data_unified)))
faers_ascii_data
testthat::expect_error(object = retrieve_faersascii(object = "tests/resources/nothing"))
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/resources/cache/cache_test.rdata")) )
testthat::test_that("retrieve_faersascii", {
testthat::expect_error(object = retrieve_faersascii(object = "tests/resources/nothing"))
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/resources/cache/cache_test.rdata")) )
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/resources/cache/cache_test.rdata", drug_indication_pattern = "Parkinson")) )
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/resources/cache/cache_test.rdata", drug_pattern = "Levodopa")) )
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/resources/cache/cache_test.rdata",
drug_indication_pattern = "Parkinson",
drug_pattern = "Levodopa")) )
})
devtools::check()
usethis::use_import_from("utils", "unzip")
usethis::use_import_from("stats", "pt")
devtools::check()
testthat::test_path()
devtools::check()
testthat::test_that("arrange_date", {
testthat::expect_error(arrange_date("hju"))
testthat::expect_equal(arrange_date("2020"), as.Date("2020-06-30") )
testthat::expect_equal(arrange_date("202006"), as.Date("2020-06-15") )
testthat::expect_equal(arrange_date("20200601"), as.Date("2020-06-01") )
})
testthat::test_that("retrieve_faersascii", {
testthat::expect_error(object = retrieve_faersascii(object = "tests/testthat/resources/nothing"))
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/testthat/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/testthat/resources/cache/cache_test.rdata")) )
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/testthat/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/testthat/resources/cache/cache_test.rdata", drug_indication_pattern = "Parkinson")) )
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/testthat/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/testthat/resources/cache/cache_test.rdata", drug_pattern = "Levodopa")) )
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/testthat/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/testthat/resources/cache/cache_test.rdata",
drug_indication_pattern = "Parkinson",
drug_pattern = "Levodopa")) )
})
devtools::load_all(".")
testthat::test_that("retrieve_faersascii", {
testthat::expect_error(object = retrieve_faersascii(object = "tests/testthat/resources/nothing"))
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/testthat/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/testthat/resources/cache/cache_test.rdata")) )
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/testthat/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/testthat/resources/cache/cache_test.rdata", drug_indication_pattern = "Parkinson")) )
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/testthat/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/testthat/resources/cache/cache_test.rdata", drug_pattern = "Levodopa")) )
testthat::expect_true( object = is.list(retrieve_faersascii(ascii_dir = "tests/testthat/resources/test_zip_ex_dir/ASCII",
cache_path = "tests/testthat/resources/cache/cache_test.rdata",
drug_indication_pattern = "Parkinson",
drug_pattern = "Levodopa")) )
})
devtools::test()
test_path()
devtools::test()
devtools::test()
devtools::test()
retrieve_unique_info(xml_address_vector = "resources/1_ADR22Q1_example.xml" )
setwd("C:/Users/luis.ferreira/Desktop/faersquarterlydata/tests/testthat")
retrieve_unique_info(xml_address_vector = "resources/1_ADR22Q1_example.xml" )
retrieve_unique_info
devtools::test()
testthat::test_file("test-read_func_ascii.R")
testthat::test_file("test-read_func_xml.R")
testthat::test_file("test-ror.R")
testthat::test_file("test-ror.R")
log_v <- sample(c(TRUE, FALSE), size = nrow(faers_ascii_data_unified) ,replace = TRUE, prob = c(0.9, 0.1))
testthat::test_file("test-ror.R")
testthat::test_file("test-summary.R")
testthat::test_file("test-unzip.R")
devtools::check()
setwd("C:/Users/luis.ferreira/Desktop/faersquarterlydata")
usethis::use_news_md()
usethis::use_readme_rmd()
usethis::use_readme_md()
usethis::use_news_rmd()
usethis::use_cran_comments()
devtools::load_all(".")
setwd("C:/Users/luis.ferreira/Desktop/faersquarterlydata")
devtools::bash()
library(devtools)
